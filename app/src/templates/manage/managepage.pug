extends ../layouts/sidebar.pug
include ../mixins/controls.pug
include ../mixins/timestamp.pug

block append attributes
  -
    bodyClass['manage-page'] = true;
    bodyClass[activity] = true;

block aside
  include sidepanel.pug

block main
  h2 Welcome!
  p Welcome, #[a(href='/manage/profile') #{user.login}]!
  p Your authority: #[a(href=`/manage/staff/edit/${user.login}`) #{user.authority}]
  p Currently there are #[strong= postcount] posts on #[strong= boardcount] #[a(href='/manage/boardopts') boards]
  p #[a(href='/manage/spaceused') Disk space used] is #[strong= filters.readableSize(spaceused)]

  h2 Technical Info
  section#manage-info-status
    p Uptime: #[strong #[+fromSeconds(process.uptime())]]
    - var cpuUsage = process.cpuUsage()
    p CPU usage (microseconds):
      ul.list.list_unmarked
        li user - #[strong=cpuUsage.user]
        li system - #[strong=cpuUsage.system]
    - var memoryUsage = process.memoryUsage()
    p Memory usage:
      ul.list.list_unmarked
        li Heap - #[strong=filters.readableSize(memoryUsage.heapUsed)]/#[strong=filters.readableSize(memoryUsage.heapTotal)] 
        li External - #[strong=filters.readableSize(memoryUsage.external)]
        li #[abbr(title='Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the process, which includes the heap, code segment and stack.') RSS] - #[strong=filters.readableSize(memoryUsage.rss)]
    p Debug port: #[strong=process.debugPort] (see #[a(href='https://nodejs.org/en/docs/guides/debugging-getting-started/') Node.js Debugging Guide])
    p App port: #[strong=process.env.KOT_APP_PORT]
    p #[abbr(title='Docker container id') Host name]: #[strong=process.env.HOSTNAME]
  section#manage-info-node
    h3 Node.js
    -var nodeVersion = process.version
    p #[a(href='https://nodejs.org/') Node] version: #[strong=nodeVersion]
    p Environment: #[strong=process.env.NODE_ENV]
    -var nodeRelatedStuff = process.versions
    p Node details: 
      +showOmittedBtn(Object.keys(nodeRelatedStuff).length, `#manage-info-node-versions`)
    div#manage-info-node-versions.hidden
      for v, k in nodeRelatedStuff
        div #{k}: #[strong=v]
  section#manage-info-mongo
    h3 Mongo version
    p #[a(href='https://www.mongodb.com/') MongoDB] version: #[strong=kot_mongo_version]
    p #[a(href='https://mongoosejs.com/') Mongoose] version: #[strong=kot_mongoose_version]

  section#manage-info-ffmpeg
    h3 ffmpeg
    mixin ffmpegFeature(key, data)
      abbr(title=data.description)= key
    mixin ffmpegFeatureList(list)
      for v, i in Object.entries(list)
        if i !== 0
          |, 
        +ffmpegFeature(v[0], v[1])
    p Available Formats: 
      +showOmittedBtn(Object.keys(ffmpegData.formats).length, `#manage-info-ffmpeg-formats`)
    div#manage-info-ffmpeg-formats.hidden
      +ffmpegFeatureList(ffmpegData.formats)
    p Available Codecs: 
      +showOmittedBtn(Object.keys(ffmpegData.codecs).length, `#manage-info-ffmpeg-codecs`)
    div#manage-info-ffmpeg-codecs.hidden
      +ffmpegFeatureList(ffmpegData.codecs)
    p Available Encoders: 
      +showOmittedBtn(Object.keys(ffmpegData.encoders).length, `#manage-info-ffmpeg-encoders`)
    div#manage-info-ffmpeg-encoders.hidden
      +ffmpegFeatureList(ffmpegData.encoders)
    p Available Filters: 
      +showOmittedBtn(Object.keys(ffmpegData.filters).length, `#manage-info-ffmpeg-filters`)
    div#manage-info-ffmpeg-filters.hidden
      +ffmpegFeatureList(ffmpegData.filters)
    p ffmpeg path: #[strong= ffmpegData.ffmpegPath]
    p ffprobe path: #[strong= ffmpegData.ffprobePath]

  section#manage-info-sharp
    h3 Sharp libraries versions
    ul.list.list_unmarked(style='column-width: 10rem;')
      for value, key in kot_sharp_versions
        li #[strong= key]: #{value}

  section#manage-info-dependencies
    h3 Dependencies
    ul.list.list_unmarked(style='column-width: 15rem;')
      for value, key in pkg.dependencies
        li #[a(href=`https://www.npmjs.com/package/${key}`)=key]: #[=value]

  section#manage-info-routes
    h3 Routes
    ul.list.list_unmarked(style='column-width: 20rem;')
     for methods, route in kot_routes
      li
        for method, i in methods
          span.badge(class={
            'badge_success': method === 'get',
            'badge_primary': method === 'post',
            'badge_danger': method === 'delete',
            'badge_warning': method === 'patch',
            'badge_secondary': !['get', 'post', 'delete', 'patch'].includes(method)
          })= method.toUpperCase()
          | 
        if methods.includes('get')
          - let r = route.split(':');
          - let p = r.slice(1);
          if p.every((param) => param.includes('?'))
            | #[a(href=r[0])= r[0]]#[span.unkfunc= ['', ...p].join(':')]
          else
            | #[span.unkfunc= route]
        else
          | #[span.unkfunc= route]
  section
    h3 Attributions
    ul
      li Icons by #[a(href="https://fontawesome.com/") Font Awesome] - #[a(href="https://fontawesome.com/license/free") CC BY 4.0 License ]

block scripts
  script(src='/.static/js/kotoba.js')
